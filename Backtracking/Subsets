void getsubsets(vector<int>& arr,vector<int>& ans,int i,vector<vector<int>> &allsubsets) {
       if(i==arr.size())
       {
        
        allsubsets.push_back({ans});// ans is the subset array
        return;
       }
       ans.push_back(arr[i]);
       getsubsets(arr,ans,i+1,allsubsets);
         ans.pop_back();
       getsubsets(arr,ans,i+1,allsubsets);
                                     // this is the main function to generate all subsets using backtracking
    }
// for Non repeatative subsets
void subsets(vector<int>& arr,vector<int>& ans, int i,vector<vector<int>> & allsubsets)
    {
        if(i==arr.size())
        {
            allsubsets.push_back({ans});
            return;
        }
        ans.push_back(arr[i]);
        subsets(arr,ans,i+1,allsubsets);
        ans.pop_back();
        int idx = i+1;
        while(idx<arr.size() && arr[idx]==arr[idx-1])
        {
            idx++;
        }
        subsets(arr,ans,idx,allsubsets);
    }
 vector<vector<int>> subsets(vector<int>& nums) {
       vector<vector<int>> allsubsets;
       vector<int> ans;
       getsubsets(nums,ans,0,allsubsets);       // function to call the helper function and return as per the question
       return allsubsets;
                       
    }

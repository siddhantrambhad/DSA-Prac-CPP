// Memorization Approach
class Solution {
public:
    int pathsum(int i, int j, vector<vector<int>>& grid,vector<vector<int>>& dp)
    {   if(i==0 && j==0)return grid[0][0];
        if(i<0 || j<0)return INT_MAX;
        if(dp[i][j]!=-1)return dp[i][j];

        int up = pathsum(i-1,j,grid,dp);
        int left =pathsum(i,j-1,grid,dp);
        int minUp   = (up == INT_MAX)   ? INT_MAX : grid[i][j] + up;
        int minLeft = (left == INT_MAX) ? INT_MAX : grid[i][j] + left;
       return dp[i][j] = min(minUp,minLeft);
       
    }
    int minPathSum(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> dp(n,vector<int> (m,-1));
        return pathsum(n-1,m-1,grid,dp);
    }
};
